experiment:
  dataset: cat_dbpedia_movielens_1m
  data_config:
    strategy: dataset
    dataloader: KnowledgeChainsLoader
    dataset_path: ../data/cat_dbpedia_movielens_1m/dataset.tsv
    side_information:
        map: ../data/cat_dbpedia_movielens_1m/map.tsv
        features: ../data/cat_dbpedia_movielens_1m/features.tsv
        properties: ../data/cat_dbpedia_movielens_1m/properties.conf
#  prefiltering:
#    strategy: user_average # Not applied in the paper experiments
  splitting:
    save_on_disk: True
    save_folder: ../data/cat_dbpedia_movielens_1m/splitting/
    test_splitting:
        strategy: temporal_hold_out
        test_ratio: 0.2
    validation_splitting:
        strategy: temporal_hold_out
        test_ratio: 0.2
  top_k: 50
  evaluation:
    cutoffs: [10, 5]
    simple_metrics: [nDCG,Precision,ItemCoverage,EPC,Gini]
    relevance_threshold: 1
  gpu: 1
  external_models_path: ../external/models/__init__.py
  models:
    Random:
      meta:
        verbose: True
        save_recs: True
      seed: 42
    external.MostPop:
      meta:
        verbose: True
        save_recs: True
        validation_metric: nDCG@10
    ItemKNN:
      meta:
        verbose: True
        save_recs: True
        validation_metric: nDCG@10
      neighbors: [50, 70, 100]
      similarity: [cosine, euclidean]
      implementation: standard
    AttributeItemKNN:
      meta:
        verbose: True
        save_recs: True
        validation_metric: nDCG@10
      neighbors: [50, 70, 100]
      similarity: [braycurtis, manhattan]